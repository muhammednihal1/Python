{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d27afbae-0b9d-4f5f-b925-a880b181d3be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a word: python\n",
      "Swapped word: nythop\n"
     ]
    }
   ],
   "source": [
    "# 1.Change a given string to a new string where the first and last chars have been exchanged.[eg: python -> nythop]\n",
    "\n",
    "a = input(\"Enter a word: \")\n",
    "nstring = a[-1:] + a[1:-1] + a[:1]\n",
    "print(\"Swapped word:\", nstring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b68ea378-b5d5-41d2-9afe-4f48b7f0f024",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the first string: hello\n",
      "Enter the second string: world\n",
      "Result: wollo herld\n"
     ]
    }
   ],
   "source": [
    "# 2.Single string from two given strings, separated by a space and swap the first two characters of each string.\n",
    "str1 = input(\"Enter the first string: \")\n",
    "str2 = input(\"Enter the second string: \")\n",
    "newstr1 = str2[:2] + str1[2:]\n",
    "newstr2 = str1[:2] + str2[2:]\n",
    "result = newstr1 + \" \" + newstr2\n",
    "print(\"Result:\", result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a7055b89-4ff6-4c5e-9f5d-5a0bac6f920c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a string: onion\n",
      "string is: oni$n\n"
     ]
    }
   ],
   "source": [
    "# 3.String occurrences of its first char have been changed to $, except the first char itself.[ex: onionïƒ oni$n]\n",
    "s= input(\"Enter a string: \")\n",
    "first_char =s[0]\n",
    "modified_string = first_char + s[1:].replace(first_char, \"$\")\n",
    "print(\"string is:\", modified_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9b10ef91-b674-42ce-a065-b17882ea1d4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the colors :red,green,yellow,blue\n",
      "first and last color: red blue\n"
     ]
    }
   ],
   "source": [
    "# 4.Create a list of colors. Display first and last colors.\n",
    "colors=input(\"Enter the colors :\")\n",
    "color=colors.split(\",\")\n",
    "print(\"first and last color:\",color[0],color[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a8ee491f-0289-4d29-b3c7-447482e537dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the filename: hello.php\n",
      "The file extension is: php\n"
     ]
    }
   ],
   "source": [
    "# 5.Write a python program to accept a filename from the user, print extension of that. (using list\n",
    "filename = input(\"Enter the filename: \")\n",
    "extension = filename.split('.')[-1]\n",
    "print(f\"The file extension is: {extension}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a915ec08-6529-44f5-9e5f-3c254a0a26a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the elements of the tuple separated by commas: a,b,c,d,e,f\n",
      "The 3rd element is: c\n",
      "The 3rd element from the last is: d\n"
     ]
    }
   ],
   "source": [
    "# 6.Write a Python program to get the 3rd element and 3rd  element from last of a tuple.\n",
    "input = input(\"Enter the elements of the tuple separated by commas: \")\n",
    "tuple = tuple(input.split(\",\"))\n",
    "print(\"The 3rd element is:\", tuple[2])\n",
    "print(\"The 3rd element from the last is:\", tuple[-3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fd617c08-fb1b-4ab0-81b2-f5bc729ae3c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the set-1: red,blue,green\n",
      "Enter the set-2: yellow,red,orange\n",
      "Colors in color-set1 but not in color-set2 are: {'green', 'blue'}\n"
     ]
    }
   ],
   "source": [
    "#7.Write a Python program to print all colors from color-set1, not contained in color-set2.\n",
    "colorset1 = set(input(\"Enter the set-1: \").split(\",\"))\n",
    "colorset2 = set(input(\"Enter the set-2: \").split(\",\"))\n",
    "print(\"Colors in color-set1 but not in color-set2 are:\", colorset1 - colorset2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "71931e7a-933e-4f4b-8874-9caf9eb7d9cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the elements of the tuple separated by spaces:linto nihal roshan jaseem\n",
      "{0: 'linto', 1: 'nihal', 2: 'roshan', 3: 'jaseem'}\n",
      "{3: 'jaseem', 2: 'roshan', 1: 'nihal', 0: 'linto'}\n"
     ]
    }
   ],
   "source": [
    "#8. Write a Python program to sort dictionary in ascending and descending order\n",
    "b=input(\"Enter the elements of the tuple separated by spaces:\").split()\n",
    "a=dict(enumerate(b))\n",
    "print(dict(sorted(a.items())))\n",
    "print(dict(sorted(a.items(),reverse=True)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "23bb732e-aef6-4577-a5a9-f14e8c3d4af7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter 3 student names separated by spaces: nihal roshan ajay\n",
      "Enter other 2 student names separated by spaces: linto jaseem\n",
      "Merged dictionary: {1: 'nihal', 2: 'roshan', 3: 'ajay', 4: 'linto', 5: 'jaseem'}\n"
     ]
    }
   ],
   "source": [
    "#9.Write a Python program to Merge two dictionaries.(Dic 1 contains 3 student names, dic2 contains 2 student names)\n",
    "s1 = input(\"Enter 3 student names separated by spaces: \").split()\n",
    "s2 = input(\"Enter other 2 student names separated by spaces: \").split()\n",
    "t1 = {1: s1[0], 2: s1[1], 3: s1[2]}\n",
    "t2 = {4: s2[0], 5: s2[1]}\n",
    "merged_students = {**t1, **t2}\n",
    "print(\"Merged dictionary:\", merged_students)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a1961091-0112-46ca-a479-ad32f1a00b91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Even numbers from 1 to 25: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n",
      "Sum of even numbers from 1 to 25: 156\n"
     ]
    }
   ],
   "source": [
    "#10.Write a Python program program to print all even numbers from 1 to 25 and calculate sum\n",
    "even_numbers = list(range(2, 26, 2))\n",
    "print(\"Even numbers from 1 to 25:\", even_numbers)\n",
    "sum_of_evens = sum(even_numbers)\n",
    "print(\"Sum of even numbers from 1 to 25:\", sum_of_evens)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c6194b3-afe0-421e-9140-ac29444a371f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4549435",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
